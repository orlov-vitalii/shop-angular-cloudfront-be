service: product-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'sqs:*'
          Resource:
            - 'arn:aws:sqs:eu-west-1:475340852272:catalogItemsQueue'
        - Effect: Allow
          Action:
            - 'sns:*'
          Resource:
            - 'arn:aws:sns:eu-west-1:475340852272:createProductTopic'
  environment:
    SNS_ARN:
      Ref: SNSTopic
    PRODUCT_TABLE_NAME: PRODUCT_TABLE
    STOCK_TABLE_NAME: STOCK_TABLE

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: 'orlov.vitalii.95@gmail.com'
        Protocol: email
        TopicArn:
          Ref: SNSTopic

functions:
  getProducts:
    handler: handler.getProducts
    events:
     - http:
         path: /products/
         method: get
         cors: true
  getProductById:
    handler: handler.getProductById
    events:
     - http:
         path: /products/{id}
         method: get
         cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn: arn:aws:sqs:eu-west-1:475340852272:catalogItemsQueue
          batchSize: 5

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
